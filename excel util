package com.hisery;

import org.apache.poi.xssf.usermodel.XSSFCell;
import org.apache.poi.xssf.usermodel.XSSFCellStyle;
import org.apache.poi.xssf.usermodel.XSSFWorkbook;
import org.apache.poi.xssf.usermodel.XSSFSheet;
import org.apache.poi.xssf.usermodel.XSSFRow;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import javax.servlet.http.HttpServletResponse;
import java.io.File;
import java.io.FileInputStream;
import java.io.IOException;
import java.io.OutputStream;
import java.util.List;
import java.util.Map;

/**
 * Created by hisery on 2017/8/12.
 */
public class ExcelUtil
{
    private static final Logger LOG = LoggerFactory.getLogger(ExcelUtil.class);

    /**
     *
     * @param excelName 导出的Excel文件名
     * @param modelUrl 模板路径 (全路径)
     * @param dataSource 数据源
     * @param response 返回请求
     * @param keyNames 数据源中Map集合的key值 (key值对应的value值顺序要列名顺序一致)
     * @param rowNum 开始 循环写入数据 的行数(从第几行开始写入数据)
     */
    public static void excelByModel(String excelName, String modelUrl, List<Map<String, String>> dataSource,
        HttpServletResponse response, List<String> keyNames, int rowNum)
    {
        OutputStream fileOut = null;
        try
        {
            // 设置导出Excel报表的导出形式
            response.setContentType("application/vnd.ms-excel");
            // 设置导出Excel报表的响应文件名
            String fileName = new String(excelName.getBytes("utf-8"), "ISO-8859-1");
            response.setHeader("Content-disposition", "attachment;filename=" + fileName + ".xlsx");
            fileOut = response.getOutputStream();
            // 读取模板文件路径
            File file = new File(modelUrl);
            FileInputStream fins = new FileInputStream(file);
            // 读取Excel模板
            XSSFWorkbook wb = new XSSFWorkbook(fins);
            // 设置边框样式
            XSSFCellStyle style = wb.createCellStyle();
            // 新建的Sheet页
            XSSFSheet newSheet = null;
            // 创建行
            XSSFRow row = null;
            // 创建列
            XSSFCell cell = null;
            // 遍历数据源 开始写入数据(因为Excel中是从0开始,所以减一)
            newSheet = wb.getSheetAt(0);
            int num = rowNum - 1;
            int count = keyNames.size();
            for (Map<String, String> item : dataSource)
            {
                //循环遍历,新建行
                row = newSheet.createRow((short) num);
                //判断有多少列数据
                for (int j = 0; j < count; j++)
                {
                    // 设置每列的数据   设置每列的样式   设置每列的值
                    cell = row.createCell(j);
                    cell.setCellStyle(style);
                    cell.setCellValue(item.get(keyNames.get(j)));
                }
                num++;
            }
            // 写入流
            wb.write(fileOut);
            // 关闭流
            fileOut.close();
        }
        catch (Exception e)
        {
            LOG.error("导出异常", e);
        }
        finally
        {
            if (fileOut != null)
            {
                try
                {
                    fileOut.close();
                }
                catch (IOException e)
                {
                    LOG.error("关闭流异常", e);
                }
            }
        }
    }

    /**
     * 描述：是否是2003的excel
     * @param filePath excel路径
     * @return 返回true是2003
     */
    public static boolean isExcel2003(String filePath)
    {
        return filePath.matches("^.+\\.(?i)(xls)$");
    }

    /**
     * 描述：是否是2007的excel
     * @param filePath excel路径
     * @return 返回true是2007
     */
    public static boolean isExcel2007(String filePath)
    {
        return filePath.matches("^.+\\.(?i)(xlsx)$");
    }
    
    /**
     *  @param filePath 文件全名称
     *  @return 是否是excel文件
     * */
    public static boolean validateExcel(String filePath)
    {
        return !(filePath == null || !(isExcel2003(filePath) || isExcel2007(filePath)));
    }
}
